"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Field_1 = require("./Field");
var EventEmitter_1 = require("./EventEmitter");
var FieldEvent;
(function (FieldEvent) {
    FieldEvent["Added"] = "FIELD_ADDED";
    FieldEvent["Removed"] = "FIELD_REMOVED";
})(FieldEvent = exports.FieldEvent || (exports.FieldEvent = {}));
var FieldsStore = (function (_super) {
    __extends(FieldsStore, _super);
    function FieldsStore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fields = new Array();
        return _this;
    }
    FieldsStore.prototype.getField = function (fieldName) {
        var fields = this.fields.filter(function (_field) { return _field.name === fieldName; });
        return fields.length === 1 ? fields[0] : undefined;
    };
    FieldsStore.prototype.addField = function (fieldName) {
        var fields = this.fields.filter(function (_field) { return _field.name === fieldName; });
        console.assert(fields.length === 0 || fields.length === 1, "Cannot have more than 1 field matching '" + fieldName + "'");
        if (fields.length === 0) {
            var newField = new Field_1.default(fieldName);
            this.fields.push(newField);
            this.emit(FieldEvent.Added, newField);
        }
        else {
        }
    };
    FieldsStore.prototype.removeField = function (fieldName) {
        var fields = this.fields.filter(function (_field) { return _field.name === fieldName; });
        var index = this.fields.indexOf(fields[0]);
        if (index > -1) {
            this.fields.splice(index, 1);
            this.emit(FieldEvent.Removed, fieldName);
        }
    };
    FieldsStore.prototype.isValid = function () {
        return this.fields.every(function (field) { return field.isValid(); });
    };
    FieldsStore.prototype.hasFeedbacks = function () {
        return this.fields.some(function (field) { return field.hasFeedbacks(); });
    };
    return FieldsStore;
}(EventEmitter_1.default));
exports.FieldsStore = FieldsStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmllbGRzU3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRmllbGRzU3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUNBQTRCO0FBQzVCLCtDQUEwQztBQUUxQyxJQUFZLFVBR1g7QUFIRCxXQUFZLFVBQVU7SUFDcEIsbUNBQXFCLENBQUE7SUFDckIsdUNBQXlCLENBQUE7QUFDM0IsQ0FBQyxFQUhXLFVBQVUsR0FBVixrQkFBVSxLQUFWLGtCQUFVLFFBR3JCO0FBRUQ7SUFBaUMsK0JBQVk7SUFBN0M7UUFBQSxxRUE0Q0M7UUEzQ0MsWUFBTSxHQUFHLElBQUksS0FBSyxFQUFTLENBQUM7O0lBMkM5QixDQUFDO0lBekNDLDhCQUFRLEdBQVIsVUFBUyxTQUFpQjtRQUN4QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUF6QixDQUF5QixDQUFDLENBQUM7UUFFdkUsT0FBTyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDckQsQ0FBQztJQUVELDhCQUFRLEdBQVIsVUFBUyxTQUFpQjtRQUN4QixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUF6QixDQUF5QixDQUFDLENBQUM7UUFDdkUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSw2Q0FBMkMsU0FBUyxNQUFHLENBQUMsQ0FBQztRQUVwSCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLElBQU0sUUFBUSxHQUFHLElBQUksZUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN2QzthQUFNO1NBR047SUFDSCxDQUFDO0lBRUQsaUNBQVcsR0FBWCxVQUFZLFNBQWlCO1FBQzNCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQXpCLENBQXlCLENBQUMsQ0FBQztRQU12RSxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBRUQsNkJBQU8sR0FBUDtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQWYsQ0FBZSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELGtDQUFZLEdBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFwQixDQUFvQixDQUFDLENBQUM7SUFDekQsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQTVDRCxDQUFpQyxzQkFBWSxHQTRDNUM7QUE1Q1ksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRmllbGQgZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vRXZlbnRFbWl0dGVyJztcblxuZXhwb3J0IGVudW0gRmllbGRFdmVudCB7XG4gIEFkZGVkID0gJ0ZJRUxEX0FEREVEJyxcbiAgUmVtb3ZlZCA9ICdGSUVMRF9SRU1PVkVEJ1xufVxuXG5leHBvcnQgY2xhc3MgRmllbGRzU3RvcmUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBmaWVsZHMgPSBuZXcgQXJyYXk8RmllbGQ+KCk7XG5cbiAgZ2V0RmllbGQoZmllbGROYW1lOiBzdHJpbmcpOiBSZWFkb25seTxGaWVsZD4gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZmllbGRzLmZpbHRlcihfZmllbGQgPT4gX2ZpZWxkLm5hbWUgPT09IGZpZWxkTmFtZSk7XG4gICAgLy9jb25zb2xlLmFzc2VydChmaWVsZHMubGVuZ3RoID09PSAxLCBgVW5rbm93biBmaWVsZCAnJHtmaWVsZE5hbWV9J2ApO1xuICAgIHJldHVybiBmaWVsZHMubGVuZ3RoID09PSAxID8gZmllbGRzWzBdIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgYWRkRmllbGQoZmllbGROYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWVsZHMgPSB0aGlzLmZpZWxkcy5maWx0ZXIoX2ZpZWxkID0+IF9maWVsZC5uYW1lID09PSBmaWVsZE5hbWUpO1xuICAgIGNvbnNvbGUuYXNzZXJ0KGZpZWxkcy5sZW5ndGggPT09IDAgfHwgZmllbGRzLmxlbmd0aCA9PT0gMSwgYENhbm5vdCBoYXZlIG1vcmUgdGhhbiAxIGZpZWxkIG1hdGNoaW5nICcke2ZpZWxkTmFtZX0nYCk7XG5cbiAgICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgbmV3RmllbGQgPSBuZXcgRmllbGQoZmllbGROYW1lKTtcbiAgICAgIHRoaXMuZmllbGRzLnB1c2gobmV3RmllbGQpO1xuICAgICAgdGhpcy5lbWl0KEZpZWxkRXZlbnQuQWRkZWQsIG5ld0ZpZWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgY2FuIGhhdmUgbXVsdGlwbGUgRmllbGRGZWVkYmFja3MgZm9yIHRoZSBzYW1lIGZpZWxkLFxuICAgICAgLy8gdGh1cyBhZGRGaWVsZCgpIGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXNcbiAgICB9XG4gIH1cblxuICByZW1vdmVGaWVsZChmaWVsZE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZmllbGRzLmZpbHRlcihfZmllbGQgPT4gX2ZpZWxkLm5hbWUgPT09IGZpZWxkTmFtZSk7XG5cbiAgICAvLyBXZSBjYW4gaGF2ZSBtdWx0aXBsZSBGaWVsZEZlZWRiYWNrcyBmb3IgdGhlIHNhbWUgZmllbGQsXG4gICAgLy8gdGh1cyByZW1vdmVGaWVsZCgpIGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXNcbiAgICAvL2NvbnNvbGUuYXNzZXJ0KGZpZWxkcy5sZW5ndGggPT09IDEsIGBVbmtub3duIGZpZWxkICcke2ZpZWxkTmFtZX0nYCk7XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmllbGRzLmluZGV4T2YoZmllbGRzWzBdKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy5maWVsZHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMuZW1pdChGaWVsZEV2ZW50LlJlbW92ZWQsIGZpZWxkTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5maWVsZHMuZXZlcnkoZmllbGQgPT4gZmllbGQuaXNWYWxpZCgpKTtcbiAgfVxuXG4gIGhhc0ZlZWRiYWNrcygpIHtcbiAgICByZXR1cm4gdGhpcy5maWVsZHMuc29tZShmaWVsZCA9PiBmaWVsZC5oYXNGZWVkYmFja3MoKSk7XG4gIH1cbn1cbiJdfQ==