"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var FormWithConstraints_1 = require("./FormWithConstraints");
var Input = (function (_super) {
    __extends(Input, _super);
    function Input() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            field: undefined
        };
        _this.fieldWillValidate = function (fieldName) {
            if (fieldName === _this.props.name) {
                _this.setState({ field: 'pending' });
            }
        };
        _this.fieldDidValidate = function (field) {
            if (field.name === _this.props.name) {
                _this.setState({ field: field });
            }
        };
        _this.fieldDidReset = function (field) {
            if (field.name === _this.props.name) {
                _this.setState({ field: undefined });
            }
        };
        return _this;
    }
    Input.prototype.componentWillMount = function () {
        this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.addFieldDidResetEventListener(this.fieldDidReset);
    };
    Input.prototype.componentWillUnmount = function () {
        this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);
    };
    Input.prototype.fieldValidationStates = function () {
        var field = this.state.field;
        var states = [];
        if (field !== undefined) {
            if (field === 'pending') {
                states.push('isPending');
            }
            else {
                if (field.hasErrors())
                    states.push('hasErrors');
                if (field.hasWarnings())
                    states.push('hasWarnings');
                if (field.hasInfos())
                    states.push('hasInfos');
                if (field.isValid())
                    states.push('isValid');
            }
        }
        return states;
    };
    Input.prototype.render = function () {
        var _a = this.props, innerRef = _a.innerRef, className = _a.className, classes = _a.classes, inputProps = __rest(_a, ["innerRef", "className", "classes"]);
        var validationStates = this.fieldValidationStates();
        var classNames = className;
        validationStates.forEach(function (validationState) {
            var tmp = classes[validationState];
            if (tmp !== undefined) {
                classNames !== undefined ? classNames += " " + tmp : classNames = tmp;
            }
        });
        return (React.createElement("input", __assign({ ref: innerRef }, inputProps, { className: classNames })));
    };
    Input.contextTypes = {
        form: PropTypes.instanceOf(FormWithConstraints_1.FormWithConstraints).isRequired
    };
    Input.defaultProps = {
        classes: {
            isPending: 'is-pending',
            hasErrors: 'has-errors',
            hasWarnings: 'has-warnings',
            hasInfos: 'has-infos',
            isValid: 'is-valid'
        }
    };
    return Input;
}(React.Component));
exports.Input = Input;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvSW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkJBQStCO0FBQy9CLHNDQUF3QztBQUV4Qyw2REFBNkY7QUFxQjdGO0lBQTJCLHlCQUF1QztJQUFsRTtRQUFBLHFFQXFGQztRQXJFQyxXQUFLLEdBQWU7WUFDbEIsS0FBSyxFQUFFLFNBQVM7U0FDakIsQ0FBQztRQWNGLHVCQUFpQixHQUFHLFVBQUMsU0FBaUI7WUFDcEMsSUFBSSxTQUFTLEtBQUssS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7Z0JBQ2pDLEtBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQzthQUNuQztRQUNILENBQUMsQ0FBQTtRQUVELHNCQUFnQixHQUFHLFVBQUMsS0FBWTtZQUM5QixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7Z0JBQ2xDLEtBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUM7YUFDeEI7UUFDSCxDQUFDLENBQUE7UUFFRCxtQkFBYSxHQUFHLFVBQUMsS0FBWTtZQUMzQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7Z0JBQ2xDLEtBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQzthQUNuQztRQUNILENBQUMsQ0FBQTs7SUFxQ0gsQ0FBQztJQWpFQyxrQ0FBa0IsR0FBbEI7UUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELG9DQUFvQixHQUFwQjtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG9DQUFvQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBb0JELHFDQUFxQixHQUFyQjtRQUNVLElBQUEsd0JBQUssQ0FBZ0I7UUFFN0IsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRWxCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDMUI7aUJBQU07Z0JBQ0wsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO29CQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ2hELElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtvQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7b0JBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFO29CQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDN0M7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxzQkFBTSxHQUFOO1FBQ0UsSUFBTSxlQUE0RCxFQUExRCxzQkFBUSxFQUFFLHdCQUFTLEVBQUUsb0JBQU8sRUFBRSw2REFBNEIsQ0FBQztRQUNuRSxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBRXRELElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUMzQixnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQSxlQUFlO1lBQ3RDLElBQU0sR0FBRyxHQUFHLE9BQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN0QyxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7Z0JBQ3JCLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxNQUFJLEdBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQzthQUN2RTtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUNMLHdDQUFPLEdBQUcsRUFBRSxRQUFRLElBQU0sVUFBVSxJQUFFLFNBQVMsRUFBRSxVQUFVLElBQUksQ0FDaEUsQ0FBQztJQUNKLENBQUM7SUFuRk0sa0JBQVksR0FBc0M7UUFDdkQsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMseUNBQW1CLENBQUMsQ0FBQyxVQUFVO0tBQzNELENBQUM7SUFHSyxrQkFBWSxHQUFlO1FBQ2hDLE9BQU8sRUFBRTtZQUNQLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFNBQVMsRUFBRSxZQUFZO1lBQ3ZCLFdBQVcsRUFBRSxjQUFjO1lBQzNCLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLE9BQU8sRUFBRSxVQUFVO1NBQ3BCO0tBQ0YsQ0FBQztJQXVFSixZQUFDO0NBQUEsQUFyRkQsQ0FBMkIsS0FBSyxDQUFDLFNBQVMsR0FxRnpDO0FBckZZLHNCQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBGb3JtV2l0aENvbnN0cmFpbnRzLCBGb3JtV2l0aENvbnN0cmFpbnRzQ2hpbGRDb250ZXh0IH0gZnJvbSAnLi9Gb3JtV2l0aENvbnN0cmFpbnRzJztcbmltcG9ydCBGaWVsZCBmcm9tICcuL0ZpZWxkJztcblxuZXhwb3J0IGludGVyZmFjZSBJbnB1dFByb3BzIGV4dGVuZHMgUmVhY3QuSW5wdXRIVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50PiB7XG4gIGlubmVyUmVmPzogUmVhY3QuUmVmPEhUTUxJbnB1dEVsZW1lbnQ+O1xuICBjbGFzc2VzOiB7XG4gICAgW2luZGV4OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgaXNQZW5kaW5nPzogc3RyaW5nO1xuICAgIGhhc0Vycm9ycz86IHN0cmluZztcbiAgICBoYXNXYXJuaW5ncz86IHN0cmluZztcbiAgICBoYXNJbmZvcz86IHN0cmluZztcbiAgICBpc1ZhbGlkPzogc3RyaW5nO1xuICB9O1xufVxuXG5pbnRlcmZhY2UgSW5wdXRTdGF0ZSB7XG4gIGZpZWxkOiB1bmRlZmluZWQgfCAncGVuZGluZycgfCBGaWVsZDtcbn1cblxuZXhwb3J0IHR5cGUgSW5wdXRDb250ZXh0ID0gRm9ybVdpdGhDb25zdHJhaW50c0NoaWxkQ29udGV4dDtcblxuZXhwb3J0IGNsYXNzIElucHV0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElucHV0UHJvcHMsIElucHV0U3RhdGU+IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlczogUmVhY3QuVmFsaWRhdGlvbk1hcDxJbnB1dENvbnRleHQ+ID0ge1xuICAgIGZvcm06IFByb3BUeXBlcy5pbnN0YW5jZU9mKEZvcm1XaXRoQ29uc3RyYWludHMpLmlzUmVxdWlyZWRcbiAgfTtcbiAgY29udGV4dCE6IElucHV0Q29udGV4dDtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzOiBJbnB1dFByb3BzID0ge1xuICAgIGNsYXNzZXM6IHtcbiAgICAgIGlzUGVuZGluZzogJ2lzLXBlbmRpbmcnLFxuICAgICAgaGFzRXJyb3JzOiAnaGFzLWVycm9ycycsXG4gICAgICBoYXNXYXJuaW5nczogJ2hhcy13YXJuaW5ncycsXG4gICAgICBoYXNJbmZvczogJ2hhcy1pbmZvcycsXG4gICAgICBpc1ZhbGlkOiAnaXMtdmFsaWQnXG4gICAgfVxuICB9O1xuXG4gIHN0YXRlOiBJbnB1dFN0YXRlID0ge1xuICAgIGZpZWxkOiB1bmRlZmluZWRcbiAgfTtcblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5jb250ZXh0LmZvcm0uYWRkRmllbGRXaWxsVmFsaWRhdGVFdmVudExpc3RlbmVyKHRoaXMuZmllbGRXaWxsVmFsaWRhdGUpO1xuICAgIHRoaXMuY29udGV4dC5mb3JtLmFkZEZpZWxkRGlkVmFsaWRhdGVFdmVudExpc3RlbmVyKHRoaXMuZmllbGREaWRWYWxpZGF0ZSk7XG4gICAgdGhpcy5jb250ZXh0LmZvcm0uYWRkRmllbGREaWRSZXNldEV2ZW50TGlzdGVuZXIodGhpcy5maWVsZERpZFJlc2V0KTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY29udGV4dC5mb3JtLnJlbW92ZUZpZWxkV2lsbFZhbGlkYXRlRXZlbnRMaXN0ZW5lcih0aGlzLmZpZWxkV2lsbFZhbGlkYXRlKTtcbiAgICB0aGlzLmNvbnRleHQuZm9ybS5yZW1vdmVGaWVsZERpZFZhbGlkYXRlRXZlbnRMaXN0ZW5lcih0aGlzLmZpZWxkRGlkVmFsaWRhdGUpO1xuICAgIHRoaXMuY29udGV4dC5mb3JtLnJlbW92ZUZpZWxkRGlkUmVzZXRFdmVudExpc3RlbmVyKHRoaXMuZmllbGREaWRSZXNldCk7XG4gIH1cblxuICBmaWVsZFdpbGxWYWxpZGF0ZSA9IChmaWVsZE5hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmIChmaWVsZE5hbWUgPT09IHRoaXMucHJvcHMubmFtZSkgeyAvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIGl0J3Mgbm90IGZvciB1c1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7ZmllbGQ6ICdwZW5kaW5nJ30pO1xuICAgIH1cbiAgfVxuXG4gIGZpZWxkRGlkVmFsaWRhdGUgPSAoZmllbGQ6IEZpZWxkKSA9PiB7XG4gICAgaWYgKGZpZWxkLm5hbWUgPT09IHRoaXMucHJvcHMubmFtZSkgeyAvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIGl0J3Mgbm90IGZvciB1c1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7ZmllbGR9KTtcbiAgICB9XG4gIH1cblxuICBmaWVsZERpZFJlc2V0ID0gKGZpZWxkOiBGaWVsZCkgPT4ge1xuICAgIGlmIChmaWVsZC5uYW1lID09PSB0aGlzLnByb3BzLm5hbWUpIHsgLy8gSWdub3JlIHRoZSBldmVudCBpZiBpdCdzIG5vdCBmb3IgdXNcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2ZpZWxkOiB1bmRlZmluZWR9KTtcbiAgICB9XG4gIH1cblxuICBmaWVsZFZhbGlkYXRpb25TdGF0ZXMoKSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHN0YXRlcyA9IFtdO1xuXG4gICAgaWYgKGZpZWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChmaWVsZCA9PT0gJ3BlbmRpbmcnKSB7XG4gICAgICAgIHN0YXRlcy5wdXNoKCdpc1BlbmRpbmcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmaWVsZC5oYXNFcnJvcnMoKSkgc3RhdGVzLnB1c2goJ2hhc0Vycm9ycycpO1xuICAgICAgICBpZiAoZmllbGQuaGFzV2FybmluZ3MoKSkgc3RhdGVzLnB1c2goJ2hhc1dhcm5pbmdzJyk7XG4gICAgICAgIGlmIChmaWVsZC5oYXNJbmZvcygpKSBzdGF0ZXMucHVzaCgnaGFzSW5mb3MnKTtcbiAgICAgICAgaWYgKGZpZWxkLmlzVmFsaWQoKSkgc3RhdGVzLnB1c2goJ2lzVmFsaWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGVzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW5uZXJSZWYsIGNsYXNzTmFtZSwgY2xhc3NlcywgLi4uaW5wdXRQcm9wcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB2YWxpZGF0aW9uU3RhdGVzID0gdGhpcy5maWVsZFZhbGlkYXRpb25TdGF0ZXMoKTtcblxuICAgIGxldCBjbGFzc05hbWVzID0gY2xhc3NOYW1lO1xuICAgIHZhbGlkYXRpb25TdGF0ZXMuZm9yRWFjaCh2YWxpZGF0aW9uU3RhdGUgPT4ge1xuICAgICAgY29uc3QgdG1wID0gY2xhc3NlcyFbdmFsaWRhdGlvblN0YXRlXTtcbiAgICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWVzICE9PSB1bmRlZmluZWQgPyBjbGFzc05hbWVzICs9IGAgJHt0bXB9YCA6IGNsYXNzTmFtZXMgPSB0bXA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0IHJlZj17aW5uZXJSZWZ9IHsuLi5pbnB1dFByb3BzfSBjbGFzc05hbWU9e2NsYXNzTmFtZXN9IC8+XG4gICAgKTtcbiAgfVxufVxuIl19