import EventEmitter from './EventEmitter';
import { InputElement } from './InputElement';
import Constructor from './Constructor';
export declare const ValidateFieldEvent = "VALIDATE_FIELD_EVENT";
declare const withValidateFieldEventEmitter: <ListenerReturnType, TBase extends Constructor<{}>>(Base: TBase) => {
    new (...args: any[]): {
        validateFieldEventEmitter: EventEmitter<ListenerReturnType>;
        emitValidateFieldEvent(input: InputElement): Promise<ListenerReturnType[]>;
        addValidateFieldEventListener(listener: (input: InputElement) => ListenerReturnType | Promise<ListenerReturnType>): void;
        removeValidateFieldEventListener(listener: (input: InputElement) => ListenerReturnType | Promise<ListenerReturnType>): void;
    };
} & TBase;
export { withValidateFieldEventEmitter };
