export default class EventEmitter {
    constructor() {
        this.listeners = new Map();
    }
    async emit(eventName, ...args) {
        const listeners = this.listeners.get(eventName);
        const ret = new Array();
        if (listeners !== undefined) {
            console.assert(listeners.length > 0, `No listener for event '${eventName}'`);
            for (const listener of listeners) {
                ret.push(await listener(...args));
            }
        }
        return ret;
    }
    addListener(eventName, listener) {
        if (!this.listeners.has(eventName))
            this.listeners.set(eventName, []);
        const listeners = this.listeners.get(eventName);
        console.assert(listeners.indexOf(listener) === -1, `Listener already added for event '${eventName}'`);
        listeners.push(listener);
    }
    removeListener(eventName, listener) {
        const listeners = this.listeners.get(eventName);
        console.assert(listeners !== undefined, `Unknown event '${eventName}'`);
        const index = listeners.lastIndexOf(listener);
        console.assert(index > -1, `Listener not found for event '${eventName}'`);
        listeners.splice(index, 1);
        if (listeners.length === 0)
            this.listeners.delete(eventName);
    }
}
