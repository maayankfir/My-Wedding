import * as React from 'react';
import { FormWithConstraintsChildContext } from './FormWithConstraints';
import { FieldFeedbacksChildContext } from './FieldFeedbacks';
import { FieldFeedbackClasses } from './FieldFeedback';
import Field from './Field';
export interface FieldFeedbackWhenValidBaseProps {
}
export interface FieldFeedbackWhenValidProps extends FieldFeedbackWhenValidBaseProps, FieldFeedbackClasses, React.HTMLAttributes<HTMLSpanElement> {
}
interface FieldFeedbackWhenValidState {
    fieldIsValid: boolean | undefined;
}
export declare type FieldFeedbackWhenValidContext = FormWithConstraintsChildContext & FieldFeedbacksChildContext;
export declare class FieldFeedbackWhenValid<Props extends FieldFeedbackWhenValidBaseProps = FieldFeedbackWhenValidProps> extends React.Component<Props, FieldFeedbackWhenValidState> {
    static contextTypes: React.ValidationMap<FieldFeedbackWhenValidContext>;
    context: FieldFeedbackWhenValidContext;
    state: FieldFeedbackWhenValidState;
    componentWillMount(): void;
    componentWillUnmount(): void;
    fieldWillValidate: (fieldName: string) => void;
    fieldDidValidate: (field: Field) => void;
    fieldDidReset: (field: Field) => void;
    render(): JSX.Element | null;
}
export {};
