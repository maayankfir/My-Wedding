var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormWithConstraints } from './FormWithConstraints';
import { FieldFeedbacks } from './FieldFeedbacks';
export class FieldFeedbackWhenValid extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            fieldIsValid: undefined
        };
        this.fieldWillValidate = (fieldName) => {
            if (fieldName === this.context.fieldFeedbacks.fieldName) {
                this.setState({ fieldIsValid: undefined });
            }
        };
        this.fieldDidValidate = (field) => {
            if (field.name === this.context.fieldFeedbacks.fieldName) {
                this.setState({ fieldIsValid: field.isValid() });
            }
        };
        this.fieldDidReset = (field) => {
            if (field.name === this.context.fieldFeedbacks.fieldName) {
                this.setState({ fieldIsValid: undefined });
            }
        };
    }
    componentWillMount() {
        const { form } = this.context;
        form.addFieldWillValidateEventListener(this.fieldWillValidate);
        form.addFieldDidValidateEventListener(this.fieldDidValidate);
        form.addFieldDidResetEventListener(this.fieldDidReset);
    }
    componentWillUnmount() {
        const { form } = this.context;
        form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        form.removeFieldDidResetEventListener(this.fieldDidReset);
    }
    render() {
        const _a = this.props, { style } = _a, otherProps = __rest(_a, ["style"]);
        return this.state.fieldIsValid ?
            React.createElement("span", Object.assign({}, otherProps, { style: Object.assign({ display: 'block' }, style) }))
            : null;
    }
}
FieldFeedbackWhenValid.contextTypes = {
    form: PropTypes.instanceOf(FormWithConstraints).isRequired,
    fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired
};
