"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var FormWithConstraints_1 = require("./FormWithConstraints");
var FieldFeedbacks_1 = require("./FieldFeedbacks");
var Async_1 = require("./Async");
var FieldFeedbackWhenValid_1 = require("./FieldFeedbackWhenValid");
var FieldFeedbackType_1 = require("./FieldFeedbackType");
var FieldFeedback = (function (_super) {
    __extends(FieldFeedback, _super);
    function FieldFeedback(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.validate = function (input) {
            var when = _this.props.when;
            var _a = _this.context, form = _a.form, fieldFeedbacks = _a.fieldFeedbacks;
            var field = form.fieldsStore.getField(input.name);
            var validation = __assign({}, _this.state.validation);
            if (fieldFeedbacks.props.stop === 'first' && field.hasFeedbacks(fieldFeedbacks.key) ||
                fieldFeedbacks.props.stop === 'first-error' && field.hasErrors(fieldFeedbacks.key) ||
                fieldFeedbacks.props.stop === 'first-warning' && field.hasWarnings(fieldFeedbacks.key) ||
                fieldFeedbacks.props.stop === 'first-info' && field.hasInfos(fieldFeedbacks.key)) {
                validation.show = undefined;
            }
            else {
                validation.show = false;
                if (typeof when === 'function') {
                    validation.show = when(input.value);
                }
                else if (typeof when === 'string') {
                    if (when === 'valid') {
                        validation.show = undefined;
                    }
                    else {
                        var validity = input.validity;
                        if (!validity.valid) {
                            if (when === '*') {
                                validation.show = true;
                            }
                            else if (validity.badInput && when === 'badInput' ||
                                validity.patternMismatch && when === 'patternMismatch' ||
                                validity.rangeOverflow && when === 'rangeOverflow' ||
                                validity.rangeUnderflow && when === 'rangeUnderflow' ||
                                validity.stepMismatch && when === 'stepMismatch' ||
                                validity.tooLong && when === 'tooLong' ||
                                validity.tooShort && when === 'tooShort' ||
                                validity.typeMismatch && when === 'typeMismatch' ||
                                validity.valueMissing && when === 'valueMissing') {
                                validation.show = true;
                            }
                        }
                    }
                }
                else {
                    throw new TypeError("Invalid FieldFeedback 'when' type: " + typeof when);
                }
            }
            field.addOrReplaceValidation(validation);
            _this.setState({
                validation: validation,
                validationMessage: input.validationMessage
            });
            return validation;
        };
        _this.fieldDidReset = function (field) {
            if (field.name === _this.context.fieldFeedbacks.fieldName) {
                _this.setState(function (prevState) { return ({
                    validation: __assign({}, prevState.validation, { show: undefined }),
                    validationMessage: ''
                }); });
            }
        };
        _this.key = context.fieldFeedbacks.addFieldFeedback();
        var error = props.error, warning = props.warning, info = props.info, when = props.when;
        var type = FieldFeedbackType_1.default.Error;
        if (when === 'valid')
            type = FieldFeedbackType_1.default.WhenValid;
        else if (warning)
            type = FieldFeedbackType_1.default.Warning;
        else if (info)
            type = FieldFeedbackType_1.default.Info;
        if (type === FieldFeedbackType_1.default.WhenValid && (error || warning || info)) {
            throw new Error('Cannot have an attribute (error, warning...) with FieldFeedback when="valid"');
        }
        _this.state = {
            validation: {
                key: _this.key,
                type: type,
                show: undefined
            },
            validationMessage: ''
        };
        return _this;
    }
    FieldFeedback.prototype.componentWillMount = function () {
        var _a = this.context, form = _a.form, fieldFeedbacks = _a.fieldFeedbacks, async = _a.async;
        if (async)
            async.addValidateFieldEventListener(this.validate);
        else
            fieldFeedbacks.addValidateFieldEventListener(this.validate);
        form.addFieldDidResetEventListener(this.fieldDidReset);
    };
    FieldFeedback.prototype.componentWillUnmount = function () {
        var _a = this.context, form = _a.form, fieldFeedbacks = _a.fieldFeedbacks, async = _a.async;
        if (async)
            async.removeValidateFieldEventListener(this.validate);
        else
            fieldFeedbacks.removeValidateFieldEventListener(this.validate);
        form.removeFieldDidResetEventListener(this.fieldDidReset);
    };
    FieldFeedback.prototype.render = function () {
        var _a = this.props, when = _a.when, error = _a.error, warning = _a.warning, info = _a.info, className = _a.className, classes = _a.classes, style = _a.style, children = _a.children, otherProps = __rest(_a, ["when", "error", "warning", "info", "className", "classes", "style", "children"]);
        var _b = this.state, validation = _b.validation, validationMessage = _b.validationMessage;
        var fieldFeedbackClassName = classes[validation.type];
        var classNames = className !== undefined ? className + " " + fieldFeedbackClassName : fieldFeedbackClassName;
        if (validation.type === FieldFeedbackType_1.default.WhenValid) {
            return React.createElement(FieldFeedbackWhenValid_1.FieldFeedbackWhenValid, __assign({ "data-feedback": this.key, style: style, className: classNames }, otherProps), children);
        }
        if (validation.show) {
            var feedback = children !== undefined ? children : validationMessage;
            return React.createElement("span", __assign({ "data-feedback": this.key, className: classNames, style: __assign({ display: 'block' }, style) }, otherProps), feedback);
        }
        return null;
    };
    FieldFeedback.defaultProps = {
        when: function () { return true; },
        classes: {
            error: 'error',
            warning: 'warning',
            info: 'info',
            whenValid: 'when-valid'
        }
    };
    FieldFeedback.contextTypes = {
        form: PropTypes.instanceOf(FormWithConstraints_1.FormWithConstraints).isRequired,
        fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks_1.FieldFeedbacks).isRequired,
        async: PropTypes.instanceOf(Async_1.Async)
    };
    return FieldFeedback;
}(React.Component));
exports.FieldFeedback = FieldFeedback;
//# sourceMappingURL=data:application/json;base64,