"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EventEmitter_1 = require("./EventEmitter");
exports.FieldWillValidateEvent = 'FIELD_WILL_VALIDATE_EVENT';
var withFieldWillValidateEventEmitter = function (Base) {
    return (function (_super) {
        __extends(FieldWillValidateEventEmitter, _super);
        function FieldWillValidateEventEmitter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.fieldWillValidateEventEmitter = new EventEmitter_1.default();
            return _this;
        }
        FieldWillValidateEventEmitter.prototype.emitFieldWillValidateEvent = function (fieldName) {
            return this.fieldWillValidateEventEmitter.emit(exports.FieldWillValidateEvent, fieldName);
        };
        FieldWillValidateEventEmitter.prototype.addFieldWillValidateEventListener = function (listener) {
            this.fieldWillValidateEventEmitter.addListener(exports.FieldWillValidateEvent, listener);
        };
        FieldWillValidateEventEmitter.prototype.removeFieldWillValidateEventListener = function (listener) {
            this.fieldWillValidateEventEmitter.removeListener(exports.FieldWillValidateEvent, listener);
        };
        return FieldWillValidateEventEmitter;
    }(Base));
};
exports.withFieldWillValidateEventEmitter = withFieldWillValidateEventEmitter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aEZpZWxkV2lsbFZhbGlkYXRlRXZlbnRFbWl0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dpdGhGaWVsZFdpbGxWYWxpZGF0ZUV2ZW50RW1pdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQ0FBMEM7QUFHN0IsUUFBQSxzQkFBc0IsR0FBRywyQkFBMkIsQ0FBQztBQUdsRSxJQUFNLGlDQUFpQyxHQUFHLFVBQWdDLElBQVc7SUFHbkY7UUFBbUQsaURBQUk7UUFBaEQ7WUFBQSxxRUFjTjtZQWJDLG1DQUE2QixHQUFHLElBQUksc0JBQVksRUFBRSxDQUFDOztRQWFyRCxDQUFDO1FBWEMsa0VBQTBCLEdBQTFCLFVBQTJCLFNBQWlCO1lBQzFDLE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyw4QkFBc0IsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRixDQUFDO1FBRUQseUVBQWlDLEdBQWpDLFVBQWtDLFFBQWtCO1lBQ2xELElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxXQUFXLENBQUMsOEJBQXNCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkYsQ0FBQztRQUVELDRFQUFvQyxHQUFwQyxVQUFxQyxRQUFrQjtZQUNyRCxJQUFJLENBQUMsNkJBQTZCLENBQUMsY0FBYyxDQUFDLDhCQUFzQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3RGLENBQUM7UUFDSCxvQ0FBQztJQUFELENBQUMsQUFkTSxDQUE0QyxJQUFJLEdBY3JEO0FBQ0osQ0FBQyxDQUFDO0FBRU8sOEVBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgQ29uc3RydWN0b3IgZnJvbSAnLi9Db25zdHJ1Y3Rvcic7XG5cbmV4cG9ydCBjb25zdCBGaWVsZFdpbGxWYWxpZGF0ZUV2ZW50ID0gJ0ZJRUxEX1dJTExfVkFMSURBVEVfRVZFTlQnO1xuXG4vLyBTZWUgVHlwZVNjcmlwdCAyLjIgU3VwcG9ydCBmb3IgTWl4LWluIGNsYXNzZXMgaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svcmVsZWFzZS1ub3Rlcy90eXBlc2NyaXB0LTItMi5odG1sXG5jb25zdCB3aXRoRmllbGRXaWxsVmFsaWRhdGVFdmVudEVtaXR0ZXIgPSA8VEJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Rvcjx7fT4+KEJhc2U6IFRCYXNlKSA9PiB7XG4gIHR5cGUgTGlzdGVuZXIgPSAoZmllbGROYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG5cbiAgcmV0dXJuIGNsYXNzIEZpZWxkV2lsbFZhbGlkYXRlRXZlbnRFbWl0dGVyIGV4dGVuZHMgQmFzZSB7XG4gICAgZmllbGRXaWxsVmFsaWRhdGVFdmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBlbWl0RmllbGRXaWxsVmFsaWRhdGVFdmVudChmaWVsZE5hbWU6IHN0cmluZykge1xuICAgICAgcmV0dXJuIHRoaXMuZmllbGRXaWxsVmFsaWRhdGVFdmVudEVtaXR0ZXIuZW1pdChGaWVsZFdpbGxWYWxpZGF0ZUV2ZW50LCBmaWVsZE5hbWUpO1xuICAgIH1cblxuICAgIGFkZEZpZWxkV2lsbFZhbGlkYXRlRXZlbnRMaXN0ZW5lcihsaXN0ZW5lcjogTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZmllbGRXaWxsVmFsaWRhdGVFdmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIoRmllbGRXaWxsVmFsaWRhdGVFdmVudCwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHJlbW92ZUZpZWxkV2lsbFZhbGlkYXRlRXZlbnRMaXN0ZW5lcihsaXN0ZW5lcjogTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZmllbGRXaWxsVmFsaWRhdGVFdmVudEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoRmllbGRXaWxsVmFsaWRhdGVFdmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCB7IHdpdGhGaWVsZFdpbGxWYWxpZGF0ZUV2ZW50RW1pdHRlciB9O1xuIl19