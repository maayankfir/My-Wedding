"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var FormWithConstraints_1 = require("./FormWithConstraints");
var FieldFeedbacks_1 = require("./FieldFeedbacks");
var FieldFeedbackWhenValid = (function (_super) {
    __extends(FieldFeedbackWhenValid, _super);
    function FieldFeedbackWhenValid() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            fieldIsValid: undefined
        };
        _this.fieldWillValidate = function (fieldName) {
            if (fieldName === _this.context.fieldFeedbacks.fieldName) {
                _this.setState({ fieldIsValid: undefined });
            }
        };
        _this.fieldDidValidate = function (field) {
            if (field.name === _this.context.fieldFeedbacks.fieldName) {
                _this.setState({ fieldIsValid: field.isValid() });
            }
        };
        _this.fieldDidReset = function (field) {
            if (field.name === _this.context.fieldFeedbacks.fieldName) {
                _this.setState({ fieldIsValid: undefined });
            }
        };
        return _this;
    }
    FieldFeedbackWhenValid.prototype.componentWillMount = function () {
        var form = this.context.form;
        form.addFieldWillValidateEventListener(this.fieldWillValidate);
        form.addFieldDidValidateEventListener(this.fieldDidValidate);
        form.addFieldDidResetEventListener(this.fieldDidReset);
    };
    FieldFeedbackWhenValid.prototype.componentWillUnmount = function () {
        var form = this.context.form;
        form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        form.removeFieldDidResetEventListener(this.fieldDidReset);
    };
    FieldFeedbackWhenValid.prototype.render = function () {
        var _a = this.props, style = _a.style, otherProps = __rest(_a, ["style"]);
        return this.state.fieldIsValid ?
            React.createElement("span", __assign({}, otherProps, { style: __assign({ display: 'block' }, style) }))
            : null;
    };
    FieldFeedbackWhenValid.contextTypes = {
        form: PropTypes.instanceOf(FormWithConstraints_1.FormWithConstraints).isRequired,
        fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks_1.FieldFeedbacks).isRequired
    };
    return FieldFeedbackWhenValid;
}(React.Component));
exports.FieldFeedbackWhenValid = FieldFeedbackWhenValid;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmllbGRGZWVkYmFja1doZW5WYWxpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9GaWVsZEZlZWRiYWNrV2hlblZhbGlkLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUErQjtBQUMvQixzQ0FBd0M7QUFFeEMsNkRBQTZGO0FBQzdGLG1EQUE4RTtBQWdCOUU7SUFDZSwwQ0FBbUQ7SUFEbEU7UUFBQSxxRUF3REM7UUFoREMsV0FBSyxHQUFnQztZQUNuQyxZQUFZLEVBQUUsU0FBUztTQUN4QixDQUFDO1FBa0JGLHVCQUFpQixHQUFHLFVBQUMsU0FBaUI7WUFDcEMsSUFBSSxTQUFTLEtBQUssS0FBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFO2dCQUN2RCxLQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsWUFBWSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7YUFDMUM7UUFDSCxDQUFDLENBQUE7UUFFRCxzQkFBZ0IsR0FBRyxVQUFDLEtBQVk7WUFDOUIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRTtnQkFDeEQsS0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUMsQ0FBQyxDQUFDO2FBQ2hEO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsbUJBQWEsR0FBRyxVQUFDLEtBQVk7WUFDM0IsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRTtnQkFDeEQsS0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLFlBQVksRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO2FBQzFDO1FBQ0gsQ0FBQyxDQUFBOztJQVlILENBQUM7SUE1Q0MsbURBQWtCLEdBQWxCO1FBQ1UsSUFBQSx3QkFBSSxDQUFrQjtRQUU5QixJQUFJLENBQUMsaUNBQWlDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELHFEQUFvQixHQUFwQjtRQUNVLElBQUEsd0JBQUksQ0FBa0I7UUFFOUIsSUFBSSxDQUFDLG9DQUFvQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFxQkQsdUNBQU0sR0FBTjtRQUNFLElBQU0sZUFBK0UsRUFBN0UsZ0JBQUssRUFBRSxrQ0FBc0UsQ0FBQztRQUV0RixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFHOUIseUNBQVUsVUFBVSxJQUFFLEtBQUssYUFBRyxPQUFPLEVBQUUsT0FBTyxJQUFLLEtBQUssS0FBSztZQUM3RCxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1gsQ0FBQztJQXJETSxtQ0FBWSxHQUF1RDtRQUN4RSxJQUFJLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyx5Q0FBbUIsQ0FBQyxDQUFDLFVBQVU7UUFDMUQsY0FBYyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsK0JBQWMsQ0FBQyxDQUFDLFVBQVU7S0FDaEUsQ0FBQztJQW1ESiw2QkFBQztDQUFBLEFBeERELENBQ2UsS0FBSyxDQUFDLFNBQVMsR0F1RDdCO0FBeERZLHdEQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgRm9ybVdpdGhDb25zdHJhaW50cywgRm9ybVdpdGhDb25zdHJhaW50c0NoaWxkQ29udGV4dCB9IGZyb20gJy4vRm9ybVdpdGhDb25zdHJhaW50cyc7XG5pbXBvcnQgeyBGaWVsZEZlZWRiYWNrcywgRmllbGRGZWVkYmFja3NDaGlsZENvbnRleHQgfSBmcm9tICcuL0ZpZWxkRmVlZGJhY2tzJztcbmltcG9ydCB7IEZpZWxkRmVlZGJhY2tDbGFzc2VzIH0gZnJvbSAnLi9GaWVsZEZlZWRiYWNrJztcbmltcG9ydCBGaWVsZCBmcm9tICcuL0ZpZWxkJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEZlZWRiYWNrV2hlblZhbGlkQmFzZVByb3BzIHtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEZlZWRiYWNrV2hlblZhbGlkUHJvcHMgZXh0ZW5kcyBGaWVsZEZlZWRiYWNrV2hlblZhbGlkQmFzZVByb3BzLCBGaWVsZEZlZWRiYWNrQ2xhc3NlcywgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTFNwYW5FbGVtZW50PiB7XG59XG5cbmludGVyZmFjZSBGaWVsZEZlZWRiYWNrV2hlblZhbGlkU3RhdGUge1xuICBmaWVsZElzVmFsaWQ6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB0eXBlIEZpZWxkRmVlZGJhY2tXaGVuVmFsaWRDb250ZXh0ID0gRm9ybVdpdGhDb25zdHJhaW50c0NoaWxkQ29udGV4dCAmIEZpZWxkRmVlZGJhY2tzQ2hpbGRDb250ZXh0O1xuXG5leHBvcnQgY2xhc3MgRmllbGRGZWVkYmFja1doZW5WYWxpZDxQcm9wcyBleHRlbmRzIEZpZWxkRmVlZGJhY2tXaGVuVmFsaWRCYXNlUHJvcHMgPSBGaWVsZEZlZWRiYWNrV2hlblZhbGlkUHJvcHM+XG4gICAgICAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIEZpZWxkRmVlZGJhY2tXaGVuVmFsaWRTdGF0ZT4ge1xuICBzdGF0aWMgY29udGV4dFR5cGVzOiBSZWFjdC5WYWxpZGF0aW9uTWFwPEZpZWxkRmVlZGJhY2tXaGVuVmFsaWRDb250ZXh0PiA9IHtcbiAgICBmb3JtOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihGb3JtV2l0aENvbnN0cmFpbnRzKS5pc1JlcXVpcmVkLFxuICAgIGZpZWxkRmVlZGJhY2tzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihGaWVsZEZlZWRiYWNrcykuaXNSZXF1aXJlZFxuICB9O1xuICBjb250ZXh0ITogRmllbGRGZWVkYmFja1doZW5WYWxpZENvbnRleHQ7XG5cbiAgc3RhdGU6IEZpZWxkRmVlZGJhY2tXaGVuVmFsaWRTdGF0ZSA9IHtcbiAgICBmaWVsZElzVmFsaWQ6IHVuZGVmaW5lZFxuICB9O1xuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBjb25zdCB7IGZvcm0gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIGZvcm0uYWRkRmllbGRXaWxsVmFsaWRhdGVFdmVudExpc3RlbmVyKHRoaXMuZmllbGRXaWxsVmFsaWRhdGUpO1xuICAgIGZvcm0uYWRkRmllbGREaWRWYWxpZGF0ZUV2ZW50TGlzdGVuZXIodGhpcy5maWVsZERpZFZhbGlkYXRlKTtcbiAgICBmb3JtLmFkZEZpZWxkRGlkUmVzZXRFdmVudExpc3RlbmVyKHRoaXMuZmllbGREaWRSZXNldCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb25zdCB7IGZvcm0gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIGZvcm0ucmVtb3ZlRmllbGRXaWxsVmFsaWRhdGVFdmVudExpc3RlbmVyKHRoaXMuZmllbGRXaWxsVmFsaWRhdGUpO1xuICAgIGZvcm0ucmVtb3ZlRmllbGREaWRWYWxpZGF0ZUV2ZW50TGlzdGVuZXIodGhpcy5maWVsZERpZFZhbGlkYXRlKTtcbiAgICBmb3JtLnJlbW92ZUZpZWxkRGlkUmVzZXRFdmVudExpc3RlbmVyKHRoaXMuZmllbGREaWRSZXNldCk7XG4gIH1cblxuICBmaWVsZFdpbGxWYWxpZGF0ZSA9IChmaWVsZE5hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmIChmaWVsZE5hbWUgPT09IHRoaXMuY29udGV4dC5maWVsZEZlZWRiYWNrcy5maWVsZE5hbWUpIHsgLy8gSWdub3JlIHRoZSBldmVudCBpZiBpdCdzIG5vdCBmb3IgdXNcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2ZpZWxkSXNWYWxpZDogdW5kZWZpbmVkfSk7XG4gICAgfVxuICB9XG5cbiAgZmllbGREaWRWYWxpZGF0ZSA9IChmaWVsZDogRmllbGQpID0+IHtcbiAgICBpZiAoZmllbGQubmFtZSA9PT0gdGhpcy5jb250ZXh0LmZpZWxkRmVlZGJhY2tzLmZpZWxkTmFtZSkgeyAvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIGl0J3Mgbm90IGZvciB1c1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7ZmllbGRJc1ZhbGlkOiBmaWVsZC5pc1ZhbGlkKCl9KTtcbiAgICB9XG4gIH1cblxuICBmaWVsZERpZFJlc2V0ID0gKGZpZWxkOiBGaWVsZCkgPT4ge1xuICAgIGlmIChmaWVsZC5uYW1lID09PSB0aGlzLmNvbnRleHQuZmllbGRGZWVkYmFja3MuZmllbGROYW1lKSB7IC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgaXQncyBub3QgZm9yIHVzXG4gICAgICB0aGlzLnNldFN0YXRlKHtmaWVsZElzVmFsaWQ6IHVuZGVmaW5lZH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIERvbid0IGZvcmdldCB0byB1cGRhdGUgbmF0aXZlL0ZpZWxkRmVlZGJhY2tXaGVuVmFsaWQucmVuZGVyKClcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc3R5bGUsIC4uLm90aGVyUHJvcHMgfSA9IHRoaXMucHJvcHMgYXMgdW5rbm93biBhcyBGaWVsZEZlZWRiYWNrV2hlblZhbGlkUHJvcHM7XG5cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5maWVsZElzVmFsaWQgP1xuICAgICAgLy8gPHNwYW4gc3R5bGU9XCJkaXNwbGF5OiBibG9ja1wiPiBpbnN0ZWFkIG9mIDxkaXY+IHNvIEZpZWxkRmVlZGJhY2tXaGVuVmFsaWQgY2FuIGJlIHdyYXBwZWQgaW5zaWRlIGEgPHA+XG4gICAgICAvLyBvdGhlclByb3BzIGJlZm9yZSBjbGFzc05hbWUgYmVjYXVzZSBvdGhlclByb3BzIGNvbnRhaW5zIGRhdGEtZmVlZGJhY2tcbiAgICAgIDxzcGFuIHsuLi5vdGhlclByb3BzfSBzdHlsZT17e2Rpc3BsYXk6ICdibG9jaycsIC4uLnN0eWxlfX0gLz5cbiAgICAgIDogbnVsbDtcbiAgfVxufVxuIl19