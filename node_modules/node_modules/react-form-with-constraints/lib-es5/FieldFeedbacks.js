"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var FormWithConstraints_1 = require("./FormWithConstraints");
var withValidateFieldEventEmitter_1 = require("./withValidateFieldEventEmitter");
var flattenDeep_1 = require("./flattenDeep");
var FieldFeedbacksComponent = (function (_super) {
    __extends(FieldFeedbacksComponent, _super);
    function FieldFeedbacksComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FieldFeedbacksComponent;
}(React.Component));
var FieldFeedbacks = (function (_super) {
    __extends(FieldFeedbacks, _super);
    function FieldFeedbacks(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.fieldFeedbackKeyCounter = 0;
        _this.validate = function (input) { return __awaiter(_this, void 0, void 0, function () {
            var _a, form, fieldFeedbacksParent, validations, field;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.context, form = _a.form, fieldFeedbacksParent = _a.fieldFeedbacks;
                        if (!(input.name === this.fieldName)) return [3, 3];
                        field = form.fieldsStore.getField(this.fieldName);
                        if (!(fieldFeedbacksParent && (fieldFeedbacksParent.props.stop === 'first' && field.hasFeedbacks(fieldFeedbacksParent.key) ||
                            fieldFeedbacksParent.props.stop === 'first-error' && field.hasErrors(fieldFeedbacksParent.key) ||
                            fieldFeedbacksParent.props.stop === 'first-warning' && field.hasWarnings(fieldFeedbacksParent.key) ||
                            fieldFeedbacksParent.props.stop === 'first-info' && field.hasInfos(fieldFeedbacksParent.key)))) return [3, 1];
                        return [3, 3];
                    case 1: return [4, this._validate(input)];
                    case 2:
                        validations = _b.sent();
                        _b.label = 3;
                    case 3: return [2, validations];
                }
            });
        }); };
        var form = context.form, fieldFeedbacksParent = context.fieldFeedbacks;
        _this.key = fieldFeedbacksParent ? fieldFeedbacksParent.computeFieldFeedbackKey() : form.computeFieldFeedbacksKey();
        if (fieldFeedbacksParent) {
            _this.fieldName = fieldFeedbacksParent.fieldName;
            if (props.for !== undefined)
                throw new Error("FieldFeedbacks cannot have a parent and a 'for' prop");
        }
        else {
            if (props.for === undefined)
                throw new Error("FieldFeedbacks cannot be without parent and without 'for' prop");
            else
                _this.fieldName = props.for;
        }
        return _this;
    }
    FieldFeedbacks.prototype.getChildContext = function () {
        return {
            fieldFeedbacks: this
        };
    };
    FieldFeedbacks.prototype.computeFieldFeedbackKey = function () {
        return this.key + "." + this.fieldFeedbackKeyCounter++;
    };
    FieldFeedbacks.prototype.addFieldFeedback = function () {
        return this.computeFieldFeedbackKey();
    };
    FieldFeedbacks.prototype.componentWillMount = function () {
        var _a = this.context, form = _a.form, fieldFeedbacksParent = _a.fieldFeedbacks;
        form.fieldsStore.addField(this.fieldName);
        var parent = fieldFeedbacksParent ? fieldFeedbacksParent : form;
        parent.addValidateFieldEventListener(this.validate);
    };
    FieldFeedbacks.prototype.componentWillUnmount = function () {
        var _a = this.context, form = _a.form, fieldFeedbacksParent = _a.fieldFeedbacks;
        form.fieldsStore.removeField(this.fieldName);
        var parent = fieldFeedbacksParent ? fieldFeedbacksParent : form;
        parent.removeValidateFieldEventListener(this.validate);
    };
    FieldFeedbacks.prototype._validate = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            var arrayOfArrays, validations;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.emitValidateFieldEvent(input)];
                    case 1:
                        arrayOfArrays = _a.sent();
                        validations = flattenDeep_1.default(arrayOfArrays);
                        return [2, validations];
                }
            });
        });
    };
    FieldFeedbacks.prototype.render = function () {
        var children = this.props.children;
        return children !== undefined ? children : null;
    };
    FieldFeedbacks.defaultProps = {
        stop: 'first-error'
    };
    FieldFeedbacks.contextTypes = {
        form: PropTypes.instanceOf(FormWithConstraints_1.FormWithConstraints).isRequired,
        fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks)
    };
    FieldFeedbacks.childContextTypes = {
        fieldFeedbacks: PropTypes.instanceOf(FieldFeedbacks).isRequired
    };
    return FieldFeedbacks;
}(withValidateFieldEventEmitter_1.withValidateFieldEventEmitter(FieldFeedbacksComponent)));
exports.FieldFeedbacks = FieldFeedbacks;
//# sourceMappingURL=data:application/json;base64,