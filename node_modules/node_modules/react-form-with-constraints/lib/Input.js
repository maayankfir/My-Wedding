var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormWithConstraints } from './FormWithConstraints';
export class Input extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            field: undefined
        };
        this.fieldWillValidate = (fieldName) => {
            if (fieldName === this.props.name) {
                this.setState({ field: 'pending' });
            }
        };
        this.fieldDidValidate = (field) => {
            if (field.name === this.props.name) {
                this.setState({ field });
            }
        };
        this.fieldDidReset = (field) => {
            if (field.name === this.props.name) {
                this.setState({ field: undefined });
            }
        };
    }
    componentWillMount() {
        this.context.form.addFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.addFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.addFieldDidResetEventListener(this.fieldDidReset);
    }
    componentWillUnmount() {
        this.context.form.removeFieldWillValidateEventListener(this.fieldWillValidate);
        this.context.form.removeFieldDidValidateEventListener(this.fieldDidValidate);
        this.context.form.removeFieldDidResetEventListener(this.fieldDidReset);
    }
    fieldValidationStates() {
        const { field } = this.state;
        const states = [];
        if (field !== undefined) {
            if (field === 'pending') {
                states.push('isPending');
            }
            else {
                if (field.hasErrors())
                    states.push('hasErrors');
                if (field.hasWarnings())
                    states.push('hasWarnings');
                if (field.hasInfos())
                    states.push('hasInfos');
                if (field.isValid())
                    states.push('isValid');
            }
        }
        return states;
    }
    render() {
        const _a = this.props, { innerRef, className, classes } = _a, inputProps = __rest(_a, ["innerRef", "className", "classes"]);
        const validationStates = this.fieldValidationStates();
        let classNames = className;
        validationStates.forEach(validationState => {
            const tmp = classes[validationState];
            if (tmp !== undefined) {
                classNames !== undefined ? classNames += ` ${tmp}` : classNames = tmp;
            }
        });
        return (React.createElement("input", Object.assign({ ref: innerRef }, inputProps, { className: classNames })));
    }
}
Input.contextTypes = {
    form: PropTypes.instanceOf(FormWithConstraints).isRequired
};
Input.defaultProps = {
    classes: {
        isPending: 'is-pending',
        hasErrors: 'has-errors',
        hasWarnings: 'has-warnings',
        hasInfos: 'has-infos',
        isValid: 'is-valid'
    }
};
